package main

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

const LineNumber = 8

func Generate(file, packageName, varName, goFile string) (err error) {
	text, err := os.ReadFile(file)
	if err != nil {
		return err
	}
	var builder strings.Builder
	builder.WriteString(fmt.Sprintf(`// Code generated by go generate; DO NOT EDIT.
package %s

var %s = []byte{
`, packageName, varName))
	var buffer bytes.Buffer
	for i, b := range text {
		if i%LineNumber == 0 {
			buffer.WriteString("\t")
		}
		if i%LineNumber == LineNumber-1 {
			buffer.WriteString(fmt.Sprintf("0x%02X,\n", b))
		} else {
			buffer.WriteString(fmt.Sprintf("0x%02X, ", b))
		}
	}
	Bytes := buffer.Bytes()
	builder.Write(Bytes)
	if Bytes[len(Bytes)-1] != byte('\n') {
		builder.WriteByte('\n')
	}
	builder.WriteString("}")
	if err = os.WriteFile(goFile, []byte(builder.String()), 0644); err != nil {
		return err
	}
	return nil
}

var GenerateList = map[string]string{
	"assets/font/Times New Roman Bold.ttf":   "TimesNewRomanBold",
	"assets/font/Times New Roman Italic.ttf": "TimesNewRomanItalic",
	"assets/icon/icon.png":                   "Icon",
	"assets/icon/spinner_dark.gif":           "SpinnerDark",
	"assets/icon/spinner_light.gif":          "SpinnerLight",
	"assets/music/NormalMove.MP3":            "NormalMove",
	"assets/music/Score.MP3":                 "Score",
	"assets/music/TouchButton.MP3":           "TouchButton",
	"assets/music/EnterGame.MP3":             "EnterGame",
	"assets/music/Win.MP3":                   "Win",
}

var Dir = filepath.Join("internal", "gen")

func Exec() (err error) {
	if err = os.RemoveAll(Dir); err != nil {
		return err
	}
	if err = os.Mkdir(Dir, 0755); err != nil {
		return err
	}
	for file, varName := range GenerateList {
		fileName := filepath.Join(Dir, varName+".go")
		if err = Generate(file, "gen", varName, fileName); err != nil {
			return err
		}
	}
	return nil
}

func main() {
	if err := Exec(); err != nil {
		fmt.Println(err)
	}
}
